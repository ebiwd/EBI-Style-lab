variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay2
  GIT_STRATEGY: fetch
  CS_DOCKERFILE_PATH: $CI_PROJECT_DIR/Dockerfile

# Can't use the {::8} notation to get a short sha in the variables section, so exporting below
before_script:
  - export CI_COMMIT_SHA_SHORT=${CI_COMMIT_SHA::8}
  - export IMAGE_NAME=$CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID

stages:
  - build
  - test
  - deploy_dev
  - deploy_prod

build:
  stage: build
  tags:
    - dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $IMAGE_NAME .
    - docker push $IMAGE_NAME

container_scanning:
  stage: test
  tags:
    - dind2
  rules:
      - if: $CI_COMMIT_BRANCH == 'master'
  variables:
    # To provide a `vulnerability-allowlist.yml` file, override the GIT_STRATEGY variable in your
    # `.gitlab-ci.yml` file and set it to `fetch`.
    # For details, see the following links:
    # https://docs.gitlab.com/ee/user/application_security/container_scanning/index.html#overriding-the-container-scanning-template
    # https://docs.gitlab.com/ee/user/application_security/container_scanning/#vulnerability-allowlisting
    GIT_STRATEGY: fetch
    IMAGE_NAME: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
    CS_IMAGE: $IMAGE_NAME
    CS_DOCKERFILE_PATH: $CI_PROJECT_DIR/Dockerfile
    SECURE_LOG_LEVEL: "debug"
    # allow_failure: true
    # artifacts:
    #   reports:
    #     container_scanning: gl-container-scanning-report.json
      #     dependency_scanning: gl-dependency-scanning-report.json
      #   paths: [gl-container-scanning-report.json, gl-dependency-scanning-report.json]

include:
  - template: Jobs/Container-Scanning.gitlab-ci.yml

# Reusable template, requires the $KUBE_CONFIG and $NAMESPACE variables to be set
# This subsitutes the environment variable $IMAGE_NAME in the overlay file, and deploys
.template: &deploy
  image: ebiwd/alpine-ssh:latest
  script:
    - mkdir -p $HOME/.kube
    - echo -n $KUBE_CONFIG | base64 -d > $HOME/.kube/config
    - envsubst '$IMAGE_NAME' < k8s/overlays/caas/ci_image.yaml > file.tmp && mv file.tmp k8s/overlays/caas/ci_image.yaml
    - kubectl kustomize k8s/overlays/caas/ | kubectl --namespace=$NAMESPACE apply -f -

deploy_to_hh_wp_dev:
  stage: deploy_dev
  only:
    - master
  variables:
    NAMESPACE: static-sites-dev
    KUBE_CONFIG: $HH_EBIWD_STATIC_KUBE_CONFIG
  <<: *deploy

deploy_to_hx_wp_dev:
  stage: deploy_dev
  only:
    - master
  variables:
    NAMESPACE: static-sites-dev
    KUBE_CONFIG: $HX_EBIWD_STATIC_KUBE_CONFIG
  <<: *deploy

deploy_to_hh_wp_prod:
  stage: deploy_prod
  only:
    - tags
  variables:
    NAMESPACE: static-sites-prod
    KUBE_CONFIG: $HH_EBIWD_STATIC_KUBE_CONFIG
  <<: *deploy

deploy_to_hx_wp_prod:
  stage: deploy_prod
  only:
    - tags
  variables:
    NAMESPACE: static-sites-prod
    KUBE_CONFIG: $HX_EBIWD_STATIC_KUBE_CONFIG
  <<: *deploy
